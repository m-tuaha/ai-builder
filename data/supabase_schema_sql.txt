-- Users (no signup UI; you will insert a few rows)
create table if not exists users (
  id uuid primary key default gen_random_uuid(),
  username text unique not null,
  password_hash text not null,          -- bcrypt
  role text not null check (role in ('tester','admin')),
  created_at timestamptz not null default now()
);

-- Images (public URL stored after upload)
create table if not exists images (
  id uuid primary key default gen_random_uuid(),
  user_id uuid not null references users(id) on delete cascade,
  url text not null,
  bytes int,
  width int,
  height int,
  mode text,              -- create | inspire | combine
  model text,             -- e.g., flux-schnell, flux-kontext-max
  prompt text,            -- prompt used for generation
  created_at timestamptz not null default now()
);
create index if not exists images_user_created_idx on images(user_id, created_at desc);

-- Events (analytics)
create table if not exists events (
  id uuid primary key default gen_random_uuid(),
  ts timestamptz not null default now(),
  user_id uuid references users(id) on delete set null,
  action text not null,                 -- text_generate_click/done, image_generate_click/done
  mode text,                            -- text | create | inspire | combine
  model text,
  prompt text,                          -- stored for admin readability
  prompt_len int,
  duration_ms int,
  status text,                          -- success | error
  image_id uuid references images(id) on delete set null,
  meta jsonb
);
create index if not exists events_ts_idx on events(ts desc);
create index if not exists events_user_ts_idx on events(user_id, ts desc);
create index if not exists events_action_ts_idx on events(action, ts desc);


-- Daily Quota resetter function for each user
-- use select reset_today_quota('<user_uuid>'); when needed to reset from DB directly
create or replace function reset_today_quota(p_user uuid)
returns int
language plpgsql
as $$
declare removed int;
begin
  delete from events
  where user_id = p_user
    and action = 'image_generate_done'
    and status = 'success'
    and ts::date = current_date;
  get diagnostics removed = row_count;
  return removed;
end; $$;
